{"version":3,"sources":["LazyImage.js","LazyImageRandomSource.js","App.js","reportWebVitals.js","index.js"],"names":["LazyImage","alt","objectIds","imageSourceOriginal","setImageSourceOriginal","useState","image","setImage","useEffect","a","randomDepartmentImage","Math","floor","random","length","fetch","imagePromise","json","imageData","primaryImageSmall","console","log","fetchLazyImage","className","title","artistDisplayName","objectID","onClick","window","open","objectURL","src","id","LazyImageRandomSource","randomImage","error","crossOrigin","format","data","loading","style","color","colorCount","display","marginRight","map","index","cursor","App","setObjectIds","then","response","status","objectIDs","catch","message","imagesToLoad","setImagesToLoad","type","placeholder","onChange","e","setTimeout","value","target","parseInt","name","htmlFor","position","right","Array","keys","i","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22656dae.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst LazyImage = ({alt, objectIds, imageSourceOriginal, setImageSourceOriginal}) => {\n    const [image, setImage] = useState([]);\n\n    useEffect(() => {\n        const fetchLazyImage = async () => {\n            try {\n                let randomDepartmentImage = objectIds[Math.floor(Math.random() * objectIds.length)]\n                let imagePromise = await fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${randomDepartmentImage}`);\n                let imageData = await imagePromise.json();\n                setImage(imageData);\n\n                if (!imageData.primaryImageSmall.length) {\n                    randomDepartmentImage = objectIds[Math.floor(Math.random() * objectIds.length)];\n                    imagePromise = await fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${randomDepartmentImage}`);\n                    imageData = await imagePromise.json();\n                    setImage(imageData);\n                };\n            }\n            catch (error) {\n                console.log('>>>--', error);\n            }\n        };\n        fetchLazyImage();\n    }, [objectIds, imageSourceOriginal]);\n\n    // const changeHeader = () => {\n    //     fetch(\"http://localhost:3001/changeheader\", {\n    //             method: \"post\",\n    //             headers: {\"Content-Type\": \"application/json\"},\n    //             // mode: \"no-cors\",\n    //             body: JSON.stringify({\n    //                 image: image\n    //             })\n    //         })\n    //         .then(response => response.json())\n    //         .then(imgUrl => {\n    //             // setImageNewHeaders(`https://thingproxy.freeboard.io/fetch/${imgUrl}`);\n    //             setImageNewHeaders(imgUrl);\n    //         })\n    // };\n\n    return (\n        <div className=\"imageDataWrapper\">\n            <div className=\"imageData\">\n                Title: {image.title}\n                <br></br>\n                Author: {image.artistDisplayName}\n                <br></br>\n                ObjectID: {image.objectID}\n                <br></br>\n            </div>\n            <img \n                onClick={() => {window.open(image.objectURL)}}\n                src={image.primaryImageSmall}\n                alt={alt} \n                id=\"inputImage\" \n            />\n        </div>\n    );\n};\n\nexport default LazyImage;","import React, { useEffect, useState } from \"react\";\nimport Color, { Palette } from 'color-thief-react';\n\nconst LazyImageRandomSource = ({alt}) => {\n    const [image, setImage] = useState([]);\n\n    useEffect(() => {\n        const fetchLazyImage = async () => {\n            try {\n                let randomImage = Math.floor(Math.random() * 1000);\n                setImage(`https://picsum.photos/1000/1000?random=${randomImage}`);\n                console.log(\"rendered\");\n            }\n            catch (error) {\n                console.log('>>>--', error);\n            } \n        };\n        fetchLazyImage();\n    }, []);\n\n    return (\n        <div className=\"imageDataWrapper\">\n                <div className=\"imageData\">\n                    <Color \n                        src={image} \n                        crossOrigin=\"anonymous\" \n                        format=\"hex\">\n                        {({ data, loading }) => {\n                            if (loading) return <p>Dominant Primary Color: Loading...</p>;\n                            return (\n                            <p>\n                                Dominant Primary Color: <strong style={{color: data}}>{data}</strong>\n                            </p>\n                            );\n                        }}\n                    </Color>\n                    <Palette src={image} crossOrigin=\"anonymous\" format=\"hex\" colorCount={3}>\n                        {({ data, loading }) => {\n                        if (loading) return <p>Loading...</p>;\n                        \n                        return (\n                            <div style={{display: \"flex\", marginRight: \"1rem\"}}>\n                            Palette:\n                                {data.map((color, index) => \n                                (\n                                <p key={index} style={{ color: color }}>\n                                    <strong >{color}</strong>\n                                </p>\n                                ))}\n                            </div>\n                        );\n                        }}\n                    </Palette>\n                </div>\n                <img \n                    style={{cursor: \"initial\"}}\n                    src={image}\n                    alt={alt} \n                    id=\"inputImage\" \n                />\n        </div>\n    );\n\n};\n\nexport default LazyImageRandomSource;","import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport LazyImage from \"./LazyImage\";\nimport LazyImageRandomSource from './LazyImageRandomSource';\nimport LazyLoad from \"react-lazyload\";\n\nconst App = () => {\n  const [objectIds, setObjectIds] = useState([]);\n  const [imageSourceOriginal, setImageSourceOriginal] = useState(true);\n\n  useEffect(() => {\n    fetch(\"https://collectionapi.metmuseum.org/public/collection/v1/objects?departmentIds=11\")\n    .then(response => response.status === 200 ? response : console.log(`HTTP error! status: ${response.status}`))\n    .then(response => response.json())\n    .then(objectIds => {\n      setObjectIds(objectIds.objectIDs);\n    })\n    .catch(error => console.log(`There has been a problem with your fetch request: ${error.message}`))\n  }, []);\n\n  const [imagesToLoad, setImagesToLoad] = useState(40);\n  const handleImagesNumber = (e) => {\n    setTimeout(() => {\n      let value = e.target.value;\n      return value === \"\" ? setImagesToLoad(1) : setImagesToLoad(parseInt(value));\n    }, 1000);\n  };\n\n  const handleSwitch = () => {\n    setImageSourceOriginal(!imageSourceOriginal);\n  };\n\n  if (!objectIds.length) {\n    return (\n      <div className=\"App\">\n        <p>Simple Loader</p>\n      </div>\n    )\n  }\n  else {\n    return (\n      <div className=\"App\">\n        <div className=\"navMainWrapper\">\n          <input\n          type=\"number\" \n          placeholder={imagesToLoad} \n          onChange={handleImagesNumber}\n          name=\"number\"\n          style={imageSourceOriginal ? {display: \"initial\"} : {display: \"none\"}}\n          />\n          <label htmlFor=\"number\" style={imageSourceOriginal ? {display: \"initial\"} : {display: \"none\"}}> / {objectIds.length} images to load from European Paintings department of the MET</label>\n          <button onClick={handleSwitch} style={{position: \"absolute\", right: \"5%\"}}>{imageSourceOriginal ? \"Switch to CORS allowed\" : \"Switch to CORS denied\"}</button>\n        </div>\n        <div className=\"imageMainWrapper\">\n          {[...Array(imagesToLoad).keys()].map(i => (\n              <LazyLoad key={i} height={200}>\n                {imageSourceOriginal ? (\n                  <LazyImage\n                    objectIds={objectIds}\n                    key={i}\n                    alt={`Random image ${i}`}\n                  />\n                )\n                :\n                (\n                  <LazyImageRandomSource\n                    key={i}\n                    alt={`Random image ${i}`}\n                  />\n                )\n                }\n              </LazyLoad>\n          ))}\n        </div>\n      </div>\n    );\n  };\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}